import ollama

from lib.tagging.joytag.joytag import generate_joytag_caption
from lib.tagging.tagging import generate_blip_caption, generate_florence_caption
from lib.tagging.wd14_tagger import generate_wd14_caption


def generate_rag_caption(image_path):
    captions = {
        # 'minicpm': {'caption': generate_minicpm_caption(image_path), 'importance': 1},
        'joytag': {'caption': generate_joytag_caption(image_path), 'importance': 1},
        'blip': {'caption': generate_blip_caption(image_path), 'importance': .25},
        'florence': {'caption': generate_florence_caption(image_path), 'importance': 1},
        'wd14': {'caption': generate_wd14_caption(image_path), 'importance': .5}
    }
    captions_key_value = ""
    for key, value in captions.items():
        captions_key_value = f"{key}: {value}\n"
        print(captions_key_value)

    response = ollama.chat(model='mistral:7b', messages=[
        {
            'role': 'system',
            'content': 'You are a helpful assistant.'
        }, {
            'role': 'user',
            'content': 'Your task is to describe an image by combining the captions given by the user.'
                       'The output format should be of the form:'
                       '"photo of [subject] [if mentioned, description of what the subject is wearing and what it is doing] [keywords separated by commas]"'
                       'Do not change the subject, even it is camel case or if it consists of multiple words, because this is a keyword.'
                       'Consider the importance of each caption when combining them.'
                       'The captions are: \n' + captions_key_value

        }
    ])
    summarizing_query = response['message']['content']

    response = ollama.chat(model='mistral:7b', messages=[
        {
            'role': 'system',
            'content': 'You are a grader. Decide if the user has correctly described the image.'
        }, {
            'role': 'user',
            'content': 'Based on a series of captions generated by image classification models, I have created a summary caption.'
                       'Decide if my summarizing caption is correct.'
                       'Each fact of my summarizing caption should be grounded by the original captions. '
                       'If at least two captions agree on a fact, it is considered as confirmed correct.'
                       'My summarizing caption is: ' + summarizing_query + '\n'
                       'The original captions are: \n' + captions_key_value
        }
    ])
    grader_feedback = response['message']['content']

    response = ollama.chat(model='mistral:7b', messages=[
        {
            'role': 'system',
            'content': 'You are a helpful assistant.'
        }, {
            'role': 'user',
            'content': 'Modify my caption by considering the feedback given by the grader.'
                       'The revised caption should be of the form:'
                       'photo of [subject] [description of the subject in one sentence][keywords]'
                       'Do not question the subject, because it is a keyword.'
                       'Do not add estimations or opinions. Do not evaluate if it is realistic or not.'
                       'My caption is: ' + summarizing_query + '\n'
                       'The grader feedback was: ' + grader_feedback
        }
    ])
    curated_summarizing_query = response['message']['content']

    print("summarizing_query: ", summarizing_query)
    print("grader_feedback: ", grader_feedback)
    print("curated_summarizing_query: ", curated_summarizing_query)
    return curated_summarizing_query

